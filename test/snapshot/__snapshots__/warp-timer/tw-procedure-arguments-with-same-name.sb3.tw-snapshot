// TW Snapshot
// Input SHA-256: a340f37844807c66f3b85eb4e85c8092a779d33d50e5655e035420ae05cea26c

// Sprite1 script
(function factoryXYZ(thread) { const target = thread.target; const runtime = target.runtime; const stage = runtime.getTargetForStage();
const b0 = runtime.getOpcodeFunction("looks_say");
return function* genXYZ () {
yield* executeInCompatibilityLayer({"MESSAGE":toGenerator("plan 2"),}, b0);
yield* thread.procedures["Znumber or text %s %s"]("bad","ok");
yield* thread.procedures["Zboolean %b %b"]("false",!false);
yield* executeInCompatibilityLayer({"MESSAGE":toGenerator("end"),}, b0);
retire(); return;
}; })

// Sprite1 Znumber or text %s %s
(function factoryXYZ(thread) { const target = thread.target; const runtime = target.runtime; const stage = runtime.getTargetForStage();
const b0 = runtime.getOpcodeFunction("looks_say");
return function* genXYZ_number_or_text__ (p0,p1) {
if ((("" + p1).toLowerCase() === "ok".toLowerCase())) {
yield* executeInCompatibilityLayer({"MESSAGE":toGenerator("pass"),}, b0);
}
return "";
}; })

// Sprite1 Zboolean %b %b
(function factoryXYZ(thread) { const target = thread.target; const runtime = target.runtime; const stage = runtime.getTargetForStage();
const b0 = runtime.getOpcodeFunction("looks_say");
return function* genXYZ_boolean__ (p0,p1) {
if (toBoolean(p1)) {
yield* executeInCompatibilityLayer({"MESSAGE":toGenerator("pass"),}, b0);
}
return "";
}; })
